// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String           @id @default(cuid())
    supabaseId    String?          @unique
    name          String?
    email         String?          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    profile       UserProfile?
    assignedTasks TaskAssignment[]
    createdTasks  Task[]           @relation("TaskCreator")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserProfile {
    id          String   @id @default(cuid())
    userId      String   @unique
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    bio         String?
    preferences Json? // Store user preferences as JSON
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Task {
    id          String           @id @default(cuid())
    title       String
    description String?          @db.Text
    status      TaskStatus       @default(TODO)
    priority    Priority         @default(MEDIUM)
    dueDate     DateTime?
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    creatorId   String
    creator     User             @relation("TaskCreator", fields: [creatorId], references: [id])
    assignments TaskAssignment[]
    tags        Tag[]
}

model TaskAssignment {
    id          String    @id @default(cuid())
    taskId      String
    task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    assignedAt  DateTime  @default(now())
    completedAt DateTime?

    @@unique([taskId, userId])
}

model Tag {
    id        String   @id @default(cuid())
    name      String
    color     String?
    tasks     Task[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum TaskStatus {
    TODO
    IN_PROGRESS
    REVIEW
    DONE
}

enum Priority {
    LOW
    MEDIUM
    HIGH
    URGENT
}
